## *********************************************************
##
## File autogenerated for the ipa_building_navigation package
## by the dynamic_reconfigure package.
## Please do not edit.
##
## ********************************************************/

from dynamic_reconfigure.encoding import extract_params

inf = float('inf')

config_description = {'name': 'Default', 'type': '', 'state': True, 'cstate': 'true', 'id': 0, 'parent': 0, 'parameters': [{'name': 'tsp_solver', 'type': 'int', 'default': 3, 'level': 0, 'description': 'TSP solver', 'min': 1, 'max': 3, 'srcline': 291, 'srcfile': '/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'edit_method': "{'enum': [{'name': 'NearestNeighbor', 'type': 'int', 'value': 1, 'srcline': 9, 'srcfile': '/home/hp/catkin_ws/src/ipa_coverage_planning/ipa_building_navigation/cfg/BuildingNavigation.cfg', 'description': 'Use the nearest neighbor TSP algorithm.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'GeneticSolver', 'type': 'int', 'value': 2, 'srcline': 10, 'srcfile': '/home/hp/catkin_ws/src/ipa_coverage_planning/ipa_building_navigation/cfg/BuildingNavigation.cfg', 'description': 'Use the genetic TSP algorithm.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'ConcordeSolver', 'type': 'int', 'value': 3, 'srcline': 11, 'srcfile': '/home/hp/catkin_ws/src/ipa_coverage_planning/ipa_building_navigation/cfg/BuildingNavigation.cfg', 'description': 'Use the Concorde TSP algorithm.', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'TSP solver'}", 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'problem_setting', 'type': 'int', 'default': 2, 'level': 0, 'description': 'Problem setting of the sequence planning problem', 'min': 1, 'max': 2, 'srcline': 291, 'srcfile': '/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'edit_method': "{'enum': [{'name': 'SimpleOrderPlanning', 'type': 'int', 'value': 1, 'srcline': 16, 'srcfile': '/home/hp/catkin_ws/src/ipa_coverage_planning/ipa_building_navigation/cfg/BuildingNavigation.cfg', 'description': 'Plan the optimal order of a simple set of locations.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'CheckpointBasedPlanning', 'type': 'int', 'value': 2, 'srcline': 17, 'srcfile': '/home/hp/catkin_ws/src/ipa_coverage_planning/ipa_building_navigation/cfg/BuildingNavigation.cfg', 'description': 'Two-stage planning that creates local cliques of locations (= checkpoints) and determines the optimal order through the members of each clique as well as the optimal order through the cliques.', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'Problem setting of the sequence planning problem'}", 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'planning_method', 'type': 'int', 'default': 2, 'level': 0, 'description': 'Trolley placement method (only applies to CheckpointBasedPlanning problem)', 'min': 1, 'max': 2, 'srcline': 291, 'srcfile': '/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'edit_method': "{'enum': [{'name': 'DragTrolleyWhenNecessary', 'type': 'int', 'value': 1, 'srcline': 23, 'srcfile': '/home/hp/catkin_ws/src/ipa_coverage_planning/ipa_building_navigation/cfg/BuildingNavigation.cfg', 'description': 'Drag the trolley if it is too far away from next room.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'PrecomputeRoomGroupsAndCorrespondingTrolleyPosition', 'type': 'int', 'value': 2, 'srcline': 24, 'srcfile': '/home/hp/catkin_ws/src/ipa_coverage_planning/ipa_building_navigation/cfg/BuildingNavigation.cfg', 'description': 'Put rooms together in groups and calculate a corresponding trolley positions.', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'Trolley placement method (only applies to CheckpointBasedPlanning problem)'}", 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'max_clique_path_length', 'type': 'double', 'default': 12.0, 'level': 0, 'description': 'Max A* path length between two rooms that are assigned to the same clique, in [m] (only applies to CheckpointBasedPlanning problem)', 'min': 0.0, 'max': inf, 'srcline': 291, 'srcfile': '/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'edit_method': '', 'ctype': 'double', 'cconsttype': 'const double'}, {'name': 'maximum_clique_size', 'type': 'int', 'default': 9001, 'level': 0, 'description': 'Maximal number of nodes belonging to one trolley clique (only applies to CheckpointBasedPlanning problem)', 'min': 0, 'max': 2147483647, 'srcline': 291, 'srcfile': '/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'edit_method': '', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'map_downsampling_factor', 'type': 'double', 'default': 0.25, 'level': 0, 'description': "The map may be downsampled during computations (e.g. of A* path lengths) in order to speed up the algorithm, if set to 1 the map will have original size, if set to 0 the algorithm won't work", 'min': 1e-05, 'max': 1.0, 'srcline': 291, 'srcfile': '/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'edit_method': '', 'ctype': 'double', 'cconsttype': 'const double'}, {'name': 'check_accessibility_of_rooms', 'type': 'bool', 'default': True, 'level': 0, 'description': 'Tells the sequence planner if it should check the given room centers for accessibility from the starting position', 'min': False, 'max': True, 'srcline': 291, 'srcfile': '/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'edit_method': '', 'ctype': 'bool', 'cconsttype': 'const bool'}, {'name': 'return_sequence_map', 'type': 'bool', 'default': False, 'level': 0, 'description': 'Tells the server if the map with the sequence drawn in should be returned', 'min': False, 'max': True, 'srcline': 291, 'srcfile': '/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'edit_method': '', 'ctype': 'bool', 'cconsttype': 'const bool'}, {'name': 'display_map', 'type': 'bool', 'default': False, 'level': 0, 'description': 'Show the resulting map with paths (only if return_sequence_map=true)', 'min': False, 'max': True, 'srcline': 291, 'srcfile': '/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'edit_method': '', 'ctype': 'bool', 'cconsttype': 'const bool'}], 'groups': [], 'srcline': 246, 'srcfile': '/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py', 'class': 'DEFAULT', 'parentclass': '', 'parentname': 'Default', 'field': 'default', 'upper': 'DEFAULT', 'lower': 'groups'}

min = {}
max = {}
defaults = {}
level = {}
type = {}
all_level = 0

#def extract_params(config):
#    params = []
#    params.extend(config['parameters'])
#    for group in config['groups']:
#        params.extend(extract_params(group))
#    return params

for param in extract_params(config_description):
    min[param['name']] = param['min']
    max[param['name']] = param['max']
    defaults[param['name']] = param['default']
    level[param['name']] = param['level']
    type[param['name']] = param['type']
    all_level = all_level | param['level']

BuildingNavigation_NearestNeighbor = 1
BuildingNavigation_GeneticSolver = 2
BuildingNavigation_ConcordeSolver = 3
BuildingNavigation_SimpleOrderPlanning = 1
BuildingNavigation_CheckpointBasedPlanning = 2
BuildingNavigation_DragTrolleyWhenNecessary = 1
BuildingNavigation_PrecomputeRoomGroupsAndCorrespondingTrolleyPosition = 2
